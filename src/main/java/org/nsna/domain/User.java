package org.nsna.domain;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;

import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import org.nsna.serializers.JsonDateDeserializer;
import org.nsna.serializers.JsonDateSerializer;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "USER", schema = "PUBLIC", uniqueConstraints = {
		@UniqueConstraint(columnNames = "USER_NAME"), @UniqueConstraint(columnNames = "USER_EMAIL") })
public class User implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -2171097275405606256L;
	private Long id;
	private String userName;
	private String userEmail;
	private String passwordHash;
	private String userRole;
	private String userPhone;
	private Date endDate;
	private String resetToken;
	private Character hidden;
	private String region;


	public User() {
	}

	public User(String userName, String userEmail) {
		this.userName = userName;
		this.userEmail = userEmail;
	}

	public User(String userName, String userEmail, String passwordHash, String userRole, String userPhone, Date endDate, Character hidden, String region) {
		this.userName = userName;
		this.userEmail = userEmail;
		this.passwordHash = passwordHash;
		this.userRole = userRole;
		this.userPhone = userPhone;
		this.endDate = endDate;
		this.hidden = hidden;
		this.region = region;		
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "ID", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@Column(name = "USER_NAME", unique = true, nullable = false, length = 25)
	public String getUserName() {
		return this.userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;
	}

	@Column(name = "USER_EMAIL", unique = true, nullable = false, length = 60)
	public String getUserEmail() {
		return this.userEmail;
	}

	public void setUserEmail(String userEmail) {
		this.userEmail = userEmail;
	}

	@Column(name = "PASSWORD_HASH", nullable = false, length = 100)
	public String getPasswordHash() {
		return this.passwordHash;
	}

	public void setPasswordHash(String passwordHash) {
		this.passwordHash = passwordHash;
	}

	@Column(name = "USER_ROLE", nullable = false, length = 20)
	public String getUserRole() {
		return this.userRole;
	}

	public void setUserRole(String userRole) {
		this.userRole = userRole;
	}

	@Column(name = "USER_PHONE", length = 10)
	public String getUserPhone() {
		return this.userPhone;
	}

	public void setUserPhone(String userPhone) {
		this.userPhone = userPhone;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "END_DATE", length = 8)
	@JsonSerialize(using=JsonDateSerializer.class)	
	public Date getEndDate() {
		return endDate;
	}

	@JsonDeserialize(using=JsonDateDeserializer.class)	
	public void setEndDate(Date endDate) {
		this.endDate = endDate;
	}
	
	
	@Column(name = "RESET_TOKEN", length = 36)	
	public String getResetToken() {
		return resetToken;
	}

	public void setResetToken(String resetToken) {
		this.resetToken = resetToken;
	}

	@Column(name = "HIDDEN", length = 1)	
	public Character getHidden() {
		return hidden;
	}

	public void setHidden(Character hidden) {
		this.hidden = hidden;
	}

	@Column(name = "REGION", length = 10)
	public String getRegion() {
		return this.region;
	}

	public void setRegion(String region) {
		this.region = region;
	}
	
	@Transient
	  public boolean isAccountNonExpired() {
		  boolean accountNonExpired = true;
		  
		  if (getEndDate()!=(null) && getEndDate().before(new Date())) {
			  accountNonExpired = false;
		  }
		  
		  return accountNonExpired;
	  }	 	

}
